--------------------------Starting GUIs------------------------------

			      ___    _   _   _____   ___                
			     / __\  | | | | |_   _| / __/               
			     | |__  | |_| |  _| |_  \__ \               
			     \___/   \___/  |_____| /___/               

JavaFX

import javafx.application.Application

starting the GUI

public class Demo extends Application{
	

	public void start(Stage primaryStage){
		//start with dialogues, pop up text boxes basically)
		//enumerated type, never will use a NONE again
		Alert dialog = new Alert(Alert.AlertType.NONE);

		Window window = dialog.getDialogPane().getScene().getWindow();

		//first example for event handling, what to do with a close request
		window.setOnCloseRequest(event -> window.hide());

		//can either use .show() or .showAndWait();
		//.showAndWait(), must deal with pop up before continuing
		dialog.showAndWait();

	}

}


public class Demo extends Application{
	

	public void start(Stage primaryStage){
		//different kind of type, type INFORMATION
		Alert dialog = new Alert(Alert.AlertType.INFORMATION);
		dialog.setTitle("GetJiggyWitIt"); //can be set to null
		dialog.setHeaderText("This information is displayed");
		dialog.setContentText("where the bulk of the info is");


		dialog.showAndWait();

	}

}

public class Demo extends Application{

	public void start(Stage primaryStage){

		Alert dialog = new Alert(Alert.AlertType.Warning);
		dialog.setTitle("Title of window");
		dialog.setHeaderText(null);
		dialog.setContentText("where info goes");

		dialog.showAndWait();
	}
}

public class Demo extends Application{

	public void start(Stage primaryStage){
		//confirmation box gives you a little more functionality
		// you will get an "ok" box and "cancel"
		Alert dialog = new Alert(Alert.AlertType.CONFIRMATION);
		dialog.setTitle("GetJiggyWitIt"); 
		dialog.setHeaderText("This information is displayed");
		dialog.setContentText("where the bulk of the info is");

		//Optional will be returned from the dialog box
		Optional<ButtonType> result = dialog.showAndWait();

		if(result.get() == ButtonType.OK){
			System.out.println("you hit ok");
		} else if (result.get() == ButtonType.){
			System.out.println("You hit cancel");
		}
	}
}

public class Demo extends Application{
	
	public void start(Stage primaryStage){
		ArrayList<String> list = new ArrayList<>();
		List.add("First");
		List.add("Second");
		List.add("Third");

		//can initialize with a default value, or "". Your choice
		ChoiceDialog<String> dialog = new Choice Dialog<>("", list);

		dialog.setHeaderText("null");
		dialog.setContentText("Please make a choice");
		dialog.showAndWait();
		//handling the different selections of buttons
		Optional<String> res = dialog.showAndWait();
		
		//make sure the user made a choice
		if(res.isPresent()){ 
			System.out.println("You selected: " + res.get());
		} else {
			System.out.println("You hit cancel");
		}
	}
}

public class Demo extends Application{
	
	public void start(Stage primaryStage){

		//can set with a default string, 
		TextInputDialog dialog = new TextInputDialog("default");
		dialog.setHeaderText(null);
		dialog.setContentText("Please make a choice");

		Optional<String> res = dialog.showAndWait();

		System.out.println(res.get());
	}
}


Formatting:

	go into the src folder and add package
		add file inside of package ie "custom.css"
		monospace gives all characters the same width
			-fx-font-family: monospace;


public class Demo extends Application{
	public void start(Stage primaryStage){
		Alert dialog = new Alert(Alert.AlertType.Information);
		dialog.setHeaderText(null);
		dialog.setContentText("");

		dialog.getDialogPane().getStyleSheets().add("resources/custom.css");

		dialog.getDialogPane().setPrefSize("width", "height");
		dialog.setOnCloseRequest(event -> System.exit(30));

		System.exit(int); //can exit with the status you give it. you know which is thrown


	}
}

Real GUIs:
	AWT, Swing, JavaFX- JavaFX is much better. Swing doesn't use native UI.
	JavaFX is the official UI for java

	Hiearchy of JavaFX
	Stage
		Scene
			Node: shape, image view, control, pane

Event handling:
	1. anonymous inner class
	2. implement the interface
	3. create an event handler instance

	4. Lambda Expression (shortcut)
		a. will define method
		b. don't need a name
		c. know the type 
	5. Method Reference


//Event handler has exactly 1 functional interface
public void start(Stage primaryStage){
	EventHandler<ActionEvent> event = new EventHandler<ActionEvent>(){
		@Override
		public void handle(ActionEvent event){
			if(event.getSource() == btn1){
				System.out.println("You clicked button 1")
			} else if(event.getSource() == btn2){
				System.out.println("you clicked button 2")
			}

			//lambda
			btn1.setOnAction((event)->{System.out.println("you Pressed 1");});
			//or when you only have one statement
			btn1.setOnAction((event)-> System.out.println("you Pressed 1"));
			//or for multi-line blocks of code:
			btn1.setOnAction((event)-> {newMethod();});


			//Method Reference
			btn1.setOnAction(this::customMethod); 	//address to the class you want to address, this or other

		}

		newMethod(){
			//define the method here that you want to us in your lambda
		}

		private void customMethod(ActionEvent event){
			System.out.println("You pressed the button")
		}
	}
}


//Starting with an image view
public class Demo extends Application{

	public void start(Stage primaryStage){
		ImageView imageView = new ImageView(url: "url");
		imageView.setFitWidth(300);				//or setFitHeight
		imageView.setPreserveRatio(true);		//will preserve height-width ratio
	}

	//or with an image
	public void start(Stage primaryStage){
		Image image = new Image(url: "url");
		ImageView imageView = new ImageView(image);
		imageView.setFitWidth(300);
		imageView.setPreserveRatio(true);
	}
}


"added text for a different git commit"