Stanford Cline
Jan. 24, 2018
Systems

2.1
2.2
2.3
2.4
2.6.2
2.7
2.8
2.9
2.10


2.1-
	ADDI  $t1 $t0 -5	#add h + (-5) = t1
	ADD   $t3 $t1 $t2	#add g + t1 = t3

2.2-
	f = g + h;
	f = f + i;

2.3- 
	SUB $t0, $s3, $s4		#to get the index in A
	ADD $t0, $s6, $t0		#to get address of element in A
	LW  $t1, 0($t0)			#load element in A
	SW  $t1, 32($s7)		#stores element loaded in A to offset 8 units from B

2.4-
	$t0 = f * 4;
	$t0 = &A[f];
	$t1 = g * 4;
	$t1 = &B[g];
	f = A[g];
	$t2 = &A[f+1];
	$t0 = A[f+1]; //could also be written A[$t2]
	$t0 = $t0 + f;
	B[g] = $t0; 

2.6.2
	//base value is stored in $s6

	lw $t0, 0($s6)		# $t0 = 2
	lw $t1, 16($s6)
	sv $t1, 0($s6) 		# 1 -> index 0
	lw $t1, 4($s6)		# $t1 = 4	
	sv $t0, 4($s6)	 	# 2 -> index 1
	lw $t0, 12($s6)		# $t0 = 6
	sv $t1, 12($s6)		# 4 -> index 3
	sv $t0, 16($s6)		# 6 -> index 4

2.7- Show how 0xabcdef12 is stored of little-endian and big-endian
	
	big-endian: 0xab 0xcd 0xef 0x12
	address:    0    4    8    12

	little-endian: 0x12 0xef 0xcd 0xab
	address:       0    4    8    12

2.8- Translate 0xabcdef12 to decimal

	2*16^0 + 1*16^1 + 15*16^2 + 14*16^3 + 13*16^4 + 12*16^5 + 11*16^6 + 10*16^7

	=2882400063

2.9- 
	sll $t0, $s3, 2			#shift for i
	sll $t1, $s4, 2			#shift for j
	add $t0, $s6, $t0		#address for A[i]
	add $t1, $s6, $t1		#address for A[j]
	lw  $t0, 0($t0)			#get val A[i]
	lw  $t1, 0($t1)			#get val A[j]
	add $t2, $t0, $t1		#add A[i] + A[j]
	sv  $t2, 32($s7)

2.10-
	$t0 = &A[0] + 4; 	//basically saving $t0 = &A[1];
	$t1 = &A[0];
	A[1] = &A[0];		//saves value $t1(&A[0]) into A[1];
	$t0 = A[1];			//fetches A[1] and saves it into $t0
	$s0 = A[1] + &A[0]; //adds those two values
	//I don't know why you would ever want to do this in c

