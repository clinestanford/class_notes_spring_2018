
tansistors are just switches. built on a silicon wafer

all software has to run on hardware, find out which is faster

depending on the cpu, it will be able to handle different things:
	MIPS: 130 instructions
	x86, x64: 1400 instructions
	ARM: 255 instructions

hard to determine fastest computer, depends on what your goal is

How much faster?? take the faster and divide by slower. Gives you 
the ratio

Latency: time from input to corresponding output

Throughput: Results produced per unit time

on the CPU it will first look at the cache to see if the necessary
software is there, then it will check the RAM and finally the hard-
drive. The more it checks, the longer it takes and the less efficient
it is.

seconds/program = cycles/program * seconds/cycle

there will be an average cycles per instruction("CPI")
	not all cycles will take the same amount of time

CPU time = Instruction Count * CPI * Clock Cycle Time
MIPS: millions of Instructions per Seconds

improve performance:
	decrease required cycles for a program
	decrease the clock cycle time
	increase the clock rate
	decrease the CPI (average clocks per instruction)

Amdahl's Law:  t(improved) = t(affected)/r(speedup)+t(unaffected)

Jan. 19, 2018

multi-threading, multi-core
	rather than increasing Ghz, they will parallelise the core
		-language Rust is very multi-core oriented
	performance is a very task-specific thing

Computers only understand bits, 1's and 0's
	Nothing but a bunch of gates/switches
	fixed length: everything uses the same number of bits
		ASCII-American Standard Computer Information Interchange
			-originally it was 7-bits
			-now 8-bit ASCII
			2^7 = 128
			2^8 = 256
			2^10 = 1024
			2^20 = 1 Mega
			2^30 = 1 Giga
		to get the number of necessary bits for data types:
			log base 2 (number of symbols represented)
				round the final answer up. 
	Variable length: length changes, when the number of bits matter
		not very useful unless bandwith is limited(shuttle comms)
	Unicode: base 8 bits are ASCII, but has 16 bits overall
		has extended to using a 32-bit infrastructure
			yes these new items even include emojis
	Encoding positive numbers
		given the number 456, break each number to 10^0, 
		10^1, 10^2
		basically for each 1 in the binary, add 2^(index)
		octal is base eight
			uses 3 bits per character
		hexadecimal is base 16
			always leads with 0x.
	Negative values:
		can have sign bit, where farthest left is sign of int
		2's compliment-used to make the math much easier
			left most bit will be a negative value, the rest are (+)
			the CPU interprets it based on the instructions it is given
				can interpret 2's compliment, ascii, hexadecimal

			11+101 = 1000

			subtraction will convert one number into 2's compliment and 
			add the two numbers together

			writing 247 in binary: for unsigned bit
				keep dividing 247 by 2, 
					if(x%2 == 0) 0:1; //continue dividing by 2
					x is then rounded down(if it didn't go in evenly)
			working with 2's compliment:
				using an 8-bit number, min=-128 max=127
				using an 8-bit number, binary will have 8 digits
				1. take absolute value, convert to binary

				(if negative do steps 2,3)
				2. flip all bits
					10011010 -> 01100101
				3. add one
					01101010
		add ones of the left to convert to a 16/32-bit number
	Little Endian vs. Big Endian:
		Big Endian: 100's 10's 1's
		Little Endian: 1's 10's 100's
		-for TCP/IP, uses Big Endian, most computers will use Little Endian
		flop the order of the 4-bit packets to convert but it VARIES

	hexadecimal and octet are basically simplified binary

	Floating Point Number:

Input/Output <---> CPU <---> Main Memory (the computer model)
	input/output enters the memory, then is processed by control unit
	CPUs understand instructions(a string of bits, a specified set of them)
		Instruction set: the full vocabulary
		instruction and data may be stored as numbers in numbers
	Memory: a word is probably 4 bytes
		memory is stored in a column of 4 bytes
			starting from the bottom of the column-
				0x0000c
				0x00008
				0x00004
				0x00000
	An instruction is a primitive operation
	Instructions:
		on boot is stored in the hard drive
	designing instruction set: tradeoffs, performance, compactness, programmable
		reduced instruction set (RISC)
		complete instruction set (CISC)

	A program always starts at 0x00000, and works upwards
	CPU fetches and executes instructions from memory




Assembly-
	can add a label on any line, label can't have spaces, can't commence #
	loops:
		use a jump/goto label, and it will take you there
		only while, and do while loops
		in assembly:
			j  (label of line)
	conditions:

	instruction types:
		rtype:  SUB   $t0           $t1 $t2
				  destination	    Sources 
		itype:  ADDI  #t0		 $t1 	1 	
				   destination source constant
		jtype: a jump command, give opcode and address
		
	add $t0, $t1, $t2 (add t1 and t2, result is stored in t0)
		this is an rtype instruction
		there are two other types of instruction sets
	addi $t0, $t1, 1 --> the 1 is an immediate operand
	a register is a variable, can be 32-bit or 64-bit
		a register is memory location inside of the CPU
	opcodes: operations, 1-4 letters	

MIPS lines are increments of 4, not indices
there are 32 names registers
	you can 'technically' us them however you want to
	$0 always contains the value '0'
		cannot write to it
	going to and from memory take a lot of time, try and use registers

	registers are each 5 bits, you only need 5 bits to identify 32 locations
	every instruction in assembly can be written in binary
	each line/instruction is 4 Bytes, 32 bits

Shifting operations:
	a shift left once will multiply by two (be aware of your number of bits)
	a shift right once will divide by two (be aware of your number of bits)

addi assumes that it is in 2's compliment form

shift amount(shamt) is limited to a 32 bit, becuause after 32 bits, it runs
out of bits and would shift it out.

multiplying 2 32-bit numbers could result in a 64-bit number
	when storing the result of multiplication, there will be a high and low 32
	bit registry where the answer is stored.

division:
	lo = $rs / $rt
	hi = $rs % $rt